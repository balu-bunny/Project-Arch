AWSTemplateFormatVersion: '2010-09-09'
Description: AWS resources for My Python App (S3, Lambda, DynamoDB, EventBridge)

Resources:
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: my-python-app-bucket

  MyDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: MyPythonAppTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: MyPythonAppLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::${MyS3Bucket}/*
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Scan
                Resource: !GetAtt MyDynamoDBTable.Arn

  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MyPythonAppLambda
      Handler: src/main.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: my-python-app-bucket
        S3Key: lambda/my-python-app.zip
      Environment:
        Variables:
          DYNAMODB_TABLE: MyPythonAppTable
          S3_BUCKET: my-python-app-bucket

  MyEventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Name: MyPythonAppScheduleRule
      Description: Trigger Lambda every hour
      ScheduleExpression: rate(1 hour)
      State: ENABLED
      Targets:
        - Arn: !GetAtt MyLambdaFunction.Arn
          Id: "MyLambdaTarget"

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MyLambdaFunction
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt MyEventBridgeRule.Arn

Outputs:
  S3BucketName:
    Description: Name of the S3 bucket
    Value: !Ref MyS3Bucket

  DynamoDBTableName:
    Description: Name of the DynamoDB table
    Value: !Ref MyDynamoDBTable

  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref MyLambdaFunction

  EventBridgeRuleName:
    Description: Name of the EventBridge rule
    Value: !Ref MyEventBridgeRule